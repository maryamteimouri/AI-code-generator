=== Prepared Input for the Model ===
<|im_start|>system
You are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>
<|im_start|>user
write a quick sort algorithm in Python.<|im_end|>
<|im_start|>assistant

=== Generated Code ===
Certainly! Below is a simple implementation of the QuickSort algorithm in Python:

```python
def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)                                                       

# Example usage:
arr = [3, 6, 8, 10, 1, 2, 1]
sorted_arr = quicksort(arr)
print(sorted_arr)
```

### Explanation:
1. **Base Case**: If the length of the array is less than or equal to 1, it is already sorted, so we return the array as is.
2. **Pivot Selection**: We choose the middle element of the array as the pivot. This can be any element, but the median is often used for better performance.
3. **Partitioning**:
   - `left`: Elements less than the pivot.
   - `middle`: Elements equal to the pivot.
   - `right`: Elements greater than the pivot.
4. **Recursive Sorting**: Recursively apply the QuickSort algorithm to the `left` and `right` sub-arrays.

This implementation uses list comprehensions for concise code and demonstrates the basic steps involved in implementing QuickSort.
=== Translated Code ===
Sure! Here's the equivalent Python function:

```python
def is_even(number):
    return number % 2 == 0
```

In Python, you use the `%` operator to find the remainder of a division operation. The expression `number % 2 == 0` checks if the remainder when `number` is divided by 2 is equal to 0, which means `number` is even.
=== Code Explanation ===
This function calculates the nth Fibonacci number using recursion. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. In this case, the function checks if the input `n` is less than or equal to 1. If it is, the function returns `n` itself because the first two Fibonacci numbers are 0 and 1. If `n` is greater than 1, the function calls itself twice: once with `n-1` and once with `n-2`, and then adds the results together to get the nth Fibonacci number.

Here's an example usage of the function:

```python
print(fibonacci(8))  # Output: 21
```

In this example, the function calculates the 8th Fibonacci number (which is 21), and prints the result.